import bpy

# Function to create a material
def create_material(name, color, metallic=0.0, roughness=0.5, emission=0):
    mat = bpy.data.materials.new(name=name)
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes["Principled BSDF"]
    bsdf.inputs['Base Color'].default_value = color
    bsdf.inputs['Metallic'].default_value = metallic
    bsdf.inputs['Roughness'].default_value = roughness
    if emission > 0:
        emission_node = mat.node_tree.nodes.new('ShaderNodeEmission')
        emission_node.inputs['Color'].default_value = color
        emission_node.inputs['Strength'].default_value = emission
        mat.node_tree.links.new(emission_node.outputs['Emission'], mat.node_tree.nodes['Material Output'].inputs['Surface'])
    return mat

# Clear existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Create floor
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))
floor = bpy.context.object
floor.name = 'Floor'
floor_material = create_material('FloorMaterial', (0.1, 0.1, 0.1, 1))
floor.data.materials.append(floor_material)

# Create walls
wall_material = create_material('WallMaterial', (0.2, 0.2, 0.2, 1))

# Back wall
bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -5, 2.5))
back_wall = bpy.context.object
back_wall.name = 'BackWall'
back_wall.scale = (5, 0.1, 2.5)
back_wall.data.materials.append(wall_material)

# Left wall
bpy.ops.mesh.primitive_cube_add(size=1, location=(-5, 0, 2.5))
left_wall = bpy.context.object
left_wall.name = 'LeftWall'
left_wall.scale = (0.1, 5, 2.5)
left_wall.data.materials.append(wall_material)

# Right wall
bpy.ops.mesh.primitive_cube_add(size=1, location=(5, 0, 2.5))
right_wall = bpy.context.object
right_wall.name = 'RightWall'
right_wall.scale = (0.1, 5, 2.5)
right_wall.data.materials.append(wall_material)

# Ceiling
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 5))
ceiling = bpy.context.object
ceiling.name = 'Ceiling'
ceiling_material = create_material('CeilingMaterial', (0.15, 0.15, 0.15, 1))
ceiling.data.materials.append(ceiling_material)

# Create a futuristic table with integrated screens
bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -2, 1))
table_top = bpy.context.object
table_top.name = 'TableTop'
table_top.scale = (2, 1, 0.1)
table_material = create_material('TableMaterial', (0.3, 0.3, 0.3, 1))
table_top.data.materials.append(table_material)

# Add integrated screens to the table
bpy.ops.mesh.primitive_plane_add(size=1, location=(0.5, -2, 1.1))
screen1 = bpy.context.object
screen1.name = 'Screen1'
screen1.scale = (0.5, 0.9, 0.01)
screen_material = create_material('ScreenMaterial', (0.1, 0.1, 0.1, 1), emission=2)
screen1.data.materials.append(screen_material)

bpy.ops.mesh.primitive_plane_add(size=1, location=(-0.5, -2, 1.1))
screen2 = bpy.context.object
screen2.name = 'Screen2'
screen2.scale = (0.5, 0.9, 0.01)
screen2.data.materials.append(screen_material)

# Create futuristic chairs
chair_material = create_material('ChairMaterial', (0.4, 0.4, 0.4, 1))
chair_locations = [(1.5, -3.5, 0.5), (-1.5, -3.5, 0.5), (1.5, -0.5, 0.5), (-1.5, -0.5, 0.5)]
for loc in chair_locations:
    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(loc[0], loc[1], loc[2]))
    chair_seat = bpy.context.object
    chair_seat.name = 'ChairSeat'
    chair_seat.data.materials.append(chair_material)
    
    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(loc[0], loc[1], loc[2] - 0.25))
    chair_leg = bpy.context.object
    chair_leg.name = 'ChairLeg'
    chair_leg.data.materials.append(chair_material)

# Create a large window with a space view
bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -5, 3))
large_window = bpy.context.object
large_window.name = 'LargeWindow'
large_window.scale = (4, 0.1, 1.5)
window_material = create_material('WindowMaterial', (0.2, 0.5, 0.7, 0.1), emission=2)
large_window.data.materials.append(window_material)

# Create holographic display
bpy.ops.mesh.primitive_plane_add(size=1, location=(0, -2, 2.5))
holo_display = bpy.context.object
holo_display.name = 'HoloDisplay'
holo_display.scale = (1, 0.01, 1.5)
holo_material = create_material('HoloMaterial', (0.1, 0.8, 0.9, 0.5), emission=5)
holo_display.data.materials.append(holo_material)

# Add some futuristic control elements on the holo display
bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.3, -2, 2.7))
control1 = bpy.context.object
control1.name = 'Control1'
control1.scale = (0.1, 0.01, 0.1)
control_material = create_material('ControlMaterial', (0.1, 0.8, 0.9, 1), emission=5)
control1.data.materials.append(control_material)

bpy.ops.mesh.primitive_cube_add(size=1, location=(0.3, -2, 2.7))
control2 = bpy.context.object
control2.name = 'Control2'
control2.scale = (0.1, 0.01, 0.1)
control2.data.materials.append(control_material)

bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -2, 2.3))
control3 = bpy.context.object
control3.name = 'Control3'
control3.scale = (0.1, 0.01, 0.1)
control3.data.materials.append(control_material)

# Lighting setup
bpy.ops.object.light_add(type='AREA', radius=1, location=(0, 0, 4.8))
overhead_light = bpy.context.object
overhead_light.name = 'OverheadLight'
overhead_light.data.energy = 3000
overhead_light.data.size = 5
overhead_light.data.color = (1, 1, 1)

# Additional panel lights for ambiance
panel_light_locations = [(0, -5, 3), (0, 5, 3)]
for loc in panel_light_locations:
    bpy.ops.object.light_add(type='AREA', radius=1, location=loc)
    panel_light = bpy.context.object
    panel_light.name = 'PanelLight'
    panel_light.data.energy = 1500
    panel_light.data.size = 3
    panel_light.data.color = (0, 0.2, 1)

# Camera setup
bpy.ops.object.camera_add(location=(10, -10, 8))
camera = bpy.context.object
camera.name = 'Camera'
camera.rotation_euler = (1.2, 0, 0.8)
bpy.context.scene.camera = camera

# Render settings
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.cycles.samples = 128
bpy.context.scene.render.resolution_x = 1920
bpy.context.scene.render.resolution_y = 1080

# Set output path
bpy.context.scene.render.filepath = '/tmp/futuristic_sci_fi_room_render2.png'

# Render the scene
bpy.ops.render.render(write_still=True)
